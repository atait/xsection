<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Cross section generator</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#

require("xsection")

module XS

  # ----------------------------------------------------------------
  # A special action to implement the cross section MRU menu item
  
  class XSectionMRUAction &lt; RBA::Action
  
    def initialize(&amp;action)
      @action = action
    end
  
    def triggered 
      @action.call(self) 
    end
  
    def script=(s)
      @script = s
      self.visible = (s != nil)
      if s
        self.title = File.basename(s) 
      end
    end
  
    def script
      @script
    end
  
  private
    @action
    @script
  end
  
  @xsection_processing_environment = XSectionScriptEnvironment.new
  
  # trigger batch-mode actions
  # $xs_run     - Script path
  # $xs_cur     - The coordinates of the test line (x1,y1;x2,y2)
  # $xs_out     - The path to the output layout file
  
  if RBA::LayoutView::current &amp;&amp; $xs_run &amp;&amp; $xs_cut =~ /^(.*),(.*);(.*),(.*)$/ &amp;&amp; $xs_out
  
    p1 = RBA::DPoint::new($1.to_f, $2.to_f)
    p2 = RBA::DPoint::new($3.to_f, $4.to_f)
  
    puts("Running XSection script #{$xs_run} with #{p1.to_s} to #{p2.to_s} ..")
    target_view = @xsection_processing_environment.run_script($xs_run, p1, p2)
    puts("Writing #{$xs_out} ..")
    target_view.active_cellview.layout.write($xs_out)
  
  end
  
end

</text>
</klayout-macro>
